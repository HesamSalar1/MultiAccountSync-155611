name: telegram-bots-system
language: python
port: 5000

install: pip install -r requirements.txt

build: echo "Build completed"

run: python unified_bot_launcher.py

environments:
  - BOT_MODE=production
  - DEBUG=false  
  - LOG_LEVEL=INFO
  - TOTAL_BOTS=9
  - RESTART_DELAY=10
  - WEB_PORT=5000
  - WEB_HOST=0.0.0.0
  - PYTHONUNBUFFERED=1

# Advanced Configuration
services:
  # Main Bot Management Service
  telegram-bots-main:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bots-main
    restart: unless-stopped
    environment:
      - BOT_MODE=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - TOTAL_BOTS=9
      - RESTART_DELAY=10
      - MAX_RESTART_ATTEMPTS=5
      - WEB_PORT=5000
      - WEB_HOST=0.0.0.0
      - SECRET_KEY=${SECRET_KEY:-your_super_secret_key_here}
      - SESSION_TIMEOUT=3600
      - DATABASE_URL=postgresql://telegram_user:${DB_PASSWORD:-secure_password}@postgres:5432/telegram_bots
      - REDIS_URL=redis://redis:6379/0
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID:-}
      - REPORT_CHAT_ID=${REPORT_CHAT_ID:-}
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    ports:
      - "5000:5000"
    volumes:
      - bot_data:/app/data
      - bot_logs:/app/logs
      - bot_sessions:/app/sessions
      - ./bots:/app/bots:ro
      - ./.env:/app/.env:ro
    depends_on:
      - postgres
      - redis
    networks:
      - telegram-bots-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Monitoring Service
  telegram-bots-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-bots-monitor
    restart: unless-stopped
    command: python monitoring_bot.py
    environment:
      - BOT_MODE=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://telegram_user:${DB_PASSWORD:-secure_password}@postgres:5432/telegram_bots
      - REDIS_URL=redis://redis:6379/1
      - MONITORING_TOKEN=${MONITORING_BOT_TOKEN:-}
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      - bot_data:/app/data
      - bot_logs:/app/logs
      - ./monitoring_bot.py:/app/monitoring_bot.py:ro
      - ./.env:/app/.env:ro
    depends_on:
      - postgres
      - redis
    networks:
      - telegram-bots-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: telegram-bots-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=telegram_bots
      - POSTGRES_USER=telegram_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - telegram-bots-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: telegram-bots-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - telegram-bots-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: telegram-bots-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - telegram-bots-main
    networks:
      - telegram-bots-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

# Network Configuration
networks:
  telegram-bots-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration
volumes:
  bot_data:
    driver: local
  bot_logs:
    driver: local
  bot_sessions:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local